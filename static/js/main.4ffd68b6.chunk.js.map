{"version":3,"sources":["components/Square.tsx","components/Board.tsx","squares.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Colors","Square","text","finished","toggleFinished","className","onClick","style","backgroundColor","GREEN","WHITE","flex","textAlign","color","Board","shuffledSquares","seed","squares","seedArray","Int8Array","s","bytes","i","length","push","parseInt","substr","hexToBytes","mt","MersenneTwister19937","seedWithArray","Int32Array","buffer","shuffle","slice","max","useState","Set","setFinished","toggleFinishedMaker","id","newFinished","values","has","delete","add","Array","keys","map","key","raids","Leviathan","App","setSeed","raid","setRaid","boardSeed","from","c","charCodeAt","toString","toUpperCase","join","repeat","boardProps","setBoardProps","flexDirection","justifyContent","alignItems","onChange","e","target","value","placeholder","width","Object","filter","name","newSeed","autoSeed","string","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4ffd68b6.chunk.js","sourcesContent":["import React from \"react\";\n\ntype Props = {\n  text: string;\n  finished: boolean;\n  toggleFinished: () => void;\n};\n\nenum Colors {\n  WHITE = \"white\",\n  GREEN = \"green\",\n}\n\nconst Square = ({ text, finished, toggleFinished }: Props) => {\n  return (\n    <div\n      className=\"square\"\n      onClick={() => toggleFinished()}\n      style={{\n        backgroundColor: finished ? Colors.GREEN : Colors.WHITE,\n      }}\n    >\n      <span\n        style={{\n          flex: 1,\n          textAlign: \"center\",\n          color: finished ? \"white\" : \"black\",\n        }}\n      >\n        {text}\n      </span>\n    </div>\n  );\n};\n\nexport default Square;\n","import React, { useState } from \"react\";\nimport { MersenneTwister19937, shuffle } from \"random-js\";\nimport Square from \"./Square\";\n\nconst hexToBytes = (s: string) => {\n  const bytes = [];\n  for (let i = 0; i < s.length; i += 2) {\n    bytes.push(parseInt(s.substr(i, 2), 16));\n  }\n  return bytes;\n};\n\nconst range = (max: number) => [...new Array(max).keys()];\n\ntype Props = {\n  seed: string;\n  squares: string[];\n};\n\nconst Board = ({ seed, squares }: Props) => {\n  let shuffledSquares: string[];\n\n  if (seed) {\n    const seedArray = new Int8Array(hexToBytes(seed));\n    const mt = MersenneTwister19937.seedWithArray(\n      new Int32Array(seedArray.buffer)\n    );\n    shuffledSquares = shuffle(mt, squares.slice(1)); // first element is free space and should always be in the middle\n    shuffledSquares = [\n      ...shuffledSquares.slice(0, 12),\n      squares[0],\n      ...shuffledSquares.slice(12),\n    ];\n  } else {\n    shuffledSquares = squares;\n  }\n\n  const [finished, setFinished] = useState<Set<number>>(new Set<number>());\n\n  const toggleFinishedMaker = (id: number) => () => {\n    const newFinished = new Set<number>(finished.values());\n    if (newFinished.has(id)) {\n      newFinished.delete(id);\n    } else {\n      newFinished.add(id);\n    }\n    setFinished(newFinished);\n  };\n\n  return (\n    <div className=\"grid\" style={{ flex: 1 }}>\n      {range(25).map((id) => (\n        <Square\n          text={shuffledSquares[id]}\n          finished={finished.has(id)}\n          toggleFinished={toggleFinishedMaker(id)}\n          key={id}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default Board;\n","const raids: { [key: string]: string[] } = {\n  \"Last Wish\": [\n    \"Free: foww genewations\",\n    \"Kalli: failsafe wish\",\n    \"Kalli: chaos doors\",\n    \"Kalli: wrong plate cleansed\",\n    \"Kalli: someone dies to orb explosion\",\n    \"Shuro Chi: someone dies to bridge jumping\",\n    \"Shuro Chi: someone dies to plate damage\",\n    \"Shuro Chi: teacup spins and drops someone\",\n    \"Shuro Chi: eye of riven is picked up\",\n    \"Morgeth: someone dies to ascendant plane jumping\",\n    \"Morgeth: platforms in ascendant plane despawn before everyone gets across\",\n    \"Morgeth: fail to cleanse stuck person\",\n    \"Morgeth: someone dies to axion darts\",\n    \"Vault: captain successfully booped into center room\",\n    \"Vault: non-standard symbol name used\",\n    \"Vault: wrong plate cleansed\",\n    \"Vault: knight sticks sword in plate\",\n    \"Riven: cheese is done\",\n    \"Riven: directions for cleanse without number chart\",\n    \"Riven: missed stun\",\n    \"Riven: wrong eye is shot when eyes are known\",\n    \"QW: someone gets lost\",\n    \"QW: multiple people get pulled inside the heart at once\",\n    \"QW: heart timer extended too early (> 10 seconds on timer)\",\n    \"QW: someone dies to creeping darkness while going down elevator\",\n  ],\n  Leviathan: [\n    \"Free: getting lost in underbelly\",\n    \"Castellum: colossi aggro'd\",\n    \"Castellum: flag order is guessed correctly\",\n    \"Castellum: flag reclaimed\",\n    \"Castellum: group does castellum 4x instead of underbelly\",\n    \"Dogs: alerting dogs with 0 stacks\",\n    \"Dogs: crystal holder alerting dogs\",\n    \"Dogs: 2-phase\",\n    \"Dogs: someone dies to beast handler\",\n    \"Baths: someone runs out of buff\",\n    \"Baths: a chain completely resets\",\n    \"Baths: 2-phase\",\n    \"Baths: accidental suicide during dps\",\n    \"Gauntlet: runner dies due to missed arrows\",\n    \"Gauntlet: someone dies to adds\",\n    \"Gauntlet: a psion is left alive\",\n    \"Gauntlet: wipe due to too few orbs after final round\",\n    \"Calus: someone dies by falling in a hole in shadow realm\",\n    \"Calus: wrong psion punched\",\n    \"Calus: fail to break shield in time\",\n    \"Calus: less than x50 for dps\",\n    \"Underbelly: death by watcher explosion\",\n    \"Underbelly: death by falling off pipes\",\n    \"Underbelly: fail to kill all watchers when trying to open a chest\",\n    \"Underbelly: death by fan\",\n  ],\n  \"Garden of Salvation\": [\n    \"Big portal bamboozle\",\n    \"Too loud eye callouts\",\n    \"Dying with motes\",\n    \"No champ mods\",\n    \"Wrong person picking up motes\",\n    \"Tether orgy\",\n    \"Cyclops in the DPS phase\",\n    \"Forgot to go into the portal\",\n    \"Wrong person or wrong portal\",\n    \"Can't kill angelics\",\n    \"Motes run out\",\n    \"Troubles with jumping sections\",\n    \"Death to Vex Instantiation\",\n    \"Someone dies because of Voltaic Overflow\",\n    \"Consecrated Mind Telefrag\",\n    '\"Pulling\" to an encounter',\n    \"Someone left out of the final tethers at second encounter\",\n    '\"Pushing\" shielded enemies',\n    \"Both portals open at once\",\n    \"Someone dying to the pyramid\",\n    \"Attempting a tether with a non-locked relay\",\n    \"Dealing with the eyes from the middle\",\n    \"Locked out during Consecrated DPS\",\n    \"Depositing motes at the wrong relay\",\n    \"Gambit team has no void weapons\",\n  ],\n};\n\nexport default raids;\n","import { MersenneTwister19937, string } from \"random-js\";\nimport React, { useState } from \"react\";\nimport { Board } from \"./components\";\nimport raids from \"./squares\";\nimport \"./App.css\";\n\nraids[\"null\"] = [...Array(25).keys()].map(() => \"\");\n\nconst App = () => {\n  const [seed, setSeed] = useState<string>(\"\");\n  const [raid, setRaid] = useState<keyof typeof raids | \"null\">(\"null\");\n  let boardSeed = \"\";\n  if (seed) {\n    boardSeed = Array.from(seed)\n      .map((c) => c.charCodeAt(0).toString(16).toUpperCase())\n      .join(\"\");\n    boardSeed = `${boardSeed}${\n      boardSeed.length % 8 !== 0 ? \"0\".repeat(8 - (boardSeed.length % 8)) : \"\"\n    }`;\n  }\n\n  const [boardProps, setBoardProps] = useState<\n    React.ComponentProps<typeof Board>\n  >({\n    squares: raids[raid],\n    seed: boardSeed,\n  });\n\n  return (\n    <div\n      className=\"app\"\n      style={{\n        flex: 1,\n        flexDirection: \"column\",\n        justifyContent: \"space-evenly\",\n      }}\n    >\n      <div\n        style={{\n          flex: 1,\n          flexDirection: \"row\",\n          alignItems: \"space-evenly\",\n        }}\n      >\n        <input\n          onChange={(e) => setSeed(e.target.value)}\n          placeholder=\"Enter seed (or leave blank for random)\"\n          value={seed}\n          style={{ width: \"32rem\" }}\n        />\n        <select\n          id=\"raid-select\"\n          value={raid}\n          onChange={(e) => setRaid(e.target.value as keyof typeof raids)}\n        >\n          <option value=\"null\">Select Raid</option>\n          {Object.keys(raids)\n            .filter((name) => name !== \"null\")\n            .map((name) => (\n              <option value={name} key={name}>\n                {name}\n              </option>\n            ))}\n        </select>\n        <button\n          onClick={() => {\n            if (raid !== \"null\") {\n              let newSeed = seed;\n              if (!seed) {\n                const mt = MersenneTwister19937.autoSeed();\n                newSeed = string(\"1234567890ABCDEF\")(mt, 32);\n                setSeed(newSeed);\n              }\n              setBoardProps({ squares: raids[raid], seed: newSeed });\n            }\n          }}\n        >\n          Generate\n        </button>\n      </div>\n      <div>\n        <Board {...boardProps} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}